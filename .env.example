Creating a template for environment variables is crucial for configuring your application in different environments like development, staging, and production. Below is a template that you can customize to suit your application's needs. This template is suitable for a Node.js application, but the concept can be applied to other programming environments as well.

### `.env.template`

```plaintext
# Database Configuration
DB_HOST=your_db_host
DB_PORT=your_db_port
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_NAME=your_db_name

# Server Configuration
PORT=your_server_port
HOST=your_server_host

# JWT Authentication
JWT_SECRET=your_jwt_secret
JWT_EXPIRATION=your_jwt_expiration_time

# API Keys
API_KEY=your_external_service_api_key
ANOTHER_API_KEY=another_service_api_key

# Email Server Configuration
EMAIL_HOST=your_email_host
EMAIL_PORT=your_email_port
EMAIL_USER=your_email_user
EMAIL_PASSWORD=your_email_password

# OAuth Configuration for Social Logins (e.g., Google, Facebook)
GOOGLE_CLIENT_ID=your_google_client_id
GOOGLE_CLIENT_SECRET=your_google_client_secret
FACEBOOK_APP_ID=your_facebook_app_id
FACEBOOK_APP_SECRET=your_facebook_app_secret

# Miscellaneous
NODE_ENV=development
LOG_LEVEL=info
```

### Instructions

1. **Copy the Template**: Duplicate this template and save it as `.env` in your project root.

2. **Customize Variables**: Replace placeholder values with real credentials and configuration values for your application and environment.

3. **Secure Your Environment Files**: 
   - Never commit the actual `.env` file containing real credentials to your version control system like Git. Instead, commit the `.env.template`.
   - Ensure your `.gitignore` file includes `.env` to prevent accidental commits of sensitive information.

4. **Loading Environment Variables**: Use a package like `dotenv` in Node.js to load environment variables from your `.env` file.

### Example Code to Load `.env` Variables in Node.js

First, install the `dotenv` package:

```bash
npm install dotenv
```

Then, add the following at the top of your application entry file (e.g., `index.js` or `app.js`):

```javascript
require('dotenv').config();
```

This will load the environment variables defined in your `.env` file into `process.env`, making them accessible throughout your application.