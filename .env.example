Creating an environment variables template is essential for managing sensitive information, such as database credentials and API keys, in your application. Below is an example of how you might structure a `.env.example` file, which serves as a template for actual environment variable files like `.env` or `.env.production`.

### `.env.example`

```
# Database Configuration
DB_HOST=your_database_host
DB_PORT=your_database_port
DB_USER=your_database_user
DB_PASSWORD=your_database_password
DB_NAME=your_database_name

# Server Configuration
PORT=your_application_port
HOST=your_application_host

# API Keys
API_KEY=your_api_key
SECRET_KEY=your_secret_key

# Email Configuration
SMTP_HOST=your_smtp_host
SMTP_PORT=your_smtp_port
SMTP_USER=your_smtp_user
SMTP_PASSWORD=your_smtp_password
EMAIL_FROM=your_email_from_address

# Third-Party Services
AWS_ACCESS_KEY_ID=your_aws_access_key_id
AWS_SECRET_ACCESS_KEY=your_aws_secret_access_key
STRIPE_SECRET_KEY=your_stripe_secret_key

# Application Settings
NODE_ENV=development
DEBUG=false

# Security
JWT_SECRET=your_jwt_secret_key
ENCRYPTION_KEY=your_encryption_key

# Optional: Logging Configuration
LOG_LEVEL=info
LOG_FILE_PATH=logs/app.log
```

### Notes:

1. **Comments**: Use `#` to add comments and explanations in your template to guide other developers.
   
2. **Sensitive Information**: Always keep your actual `.env` files out of version control by adding them to your `.gitignore`.

3. **Environment-Specific Files**: Use different `.env` files for different environments (e.g., `.env.development`, `.env.production`) to separate development settings from production settings.

4. **Defaults and Placeholders**: Provide sensible defaults or placeholders in the template to help developers understand what type of values are expected.

5. **NODE_ENV**: This is a common variable used in many Node.js applications to differentiate environments. It might have values like `development`, `test`, or `production`.

By using a template like this, you ensure a consistent setup across different environments and make it easier for other developers to configure their setups.